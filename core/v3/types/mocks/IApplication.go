// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	types "simple_text_editor/core/v3/types"

	mock "github.com/stretchr/testify/mock"
)

// IApplication is an autogenerated mock type for the IApplication type
type IApplication struct {
	mock.Mock
}

// GetContext provides a mock function with given fields:
func (_m *IApplication) GetContext() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// GetFrontendApi provides a mock function with given fields:
func (_m *IApplication) GetFrontendApi() types.IFrontendApi {
	ret := _m.Called()

	var r0 types.IFrontendApi
	if rf, ok := ret.Get(0).(func() types.IFrontendApi); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.IFrontendApi)
		}
	}

	return r0
}

// GetMenuApi provides a mock function with given fields:
func (_m *IApplication) GetMenuApi() types.IMenuHelper {
	ret := _m.Called()

	var r0 types.IMenuHelper
	if rf, ok := ret.Get(0).(func() types.IMenuHelper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.IMenuHelper)
		}
	}

	return r0
}

// OnBeforeClose provides a mock function with given fields: ctx
func (_m *IApplication) OnBeforeClose(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OnDomReady provides a mock function with given fields: ctx
func (_m *IApplication) OnDomReady(ctx context.Context) {
	_m.Called(ctx)
}

// OnShutdown provides a mock function with given fields: ctx
func (_m *IApplication) OnShutdown(ctx context.Context) {
	_m.Called(ctx)
}

// OnStartup provides a mock function with given fields: ctx
func (_m *IApplication) OnStartup(ctx context.Context) {
	_m.Called(ctx)
}

type mockConstructorTestingTNewIApplication interface {
	mock.TestingT
	Cleanup(func())
}

// NewIApplication creates a new instance of IApplication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIApplication(t mockConstructorTestingTNewIApplication) *IApplication {
	mock := &IApplication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
