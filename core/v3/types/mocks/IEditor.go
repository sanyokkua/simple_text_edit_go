// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	types "simple_text_editor/core/v3/types"

	mock "github.com/stretchr/testify/mock"
)

// IEditor is an autogenerated mock type for the IEditor type
type IEditor struct {
	mock.Mock
}

// CloseFile provides a mock function with given fields: fileId
func (_m *IEditor) CloseFile(fileId int64) error {
	ret := _m.Called(fileId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateFileAndShow provides a mock function with given fields:
func (_m *IEditor) CreateFileAndShow() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFileById provides a mock function with given fields: fileId
func (_m *IEditor) GetFileById(fileId int64) (*types.FileStruct, error) {
	ret := _m.Called(fileId)

	var r0 *types.FileStruct
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*types.FileStruct, error)); ok {
		return rf(fileId)
	}
	if rf, ok := ret.Get(0).(func(int64) *types.FileStruct); ok {
		r0 = rf(fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.FileStruct)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(fileId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilesShortInfo provides a mock function with given fields:
func (_m *IEditor) GetFilesShortInfo() ([]types.FileInfoStruct, error) {
	ret := _m.Called()

	var r0 []types.FileInfoStruct
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]types.FileInfoStruct, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []types.FileInfoStruct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.FileInfoStruct)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpenedFile provides a mock function with given fields:
func (_m *IEditor) GetOpenedFile() (*types.FileStruct, error) {
	ret := _m.Called()

	var r0 *types.FileStruct
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.FileStruct, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.FileStruct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.FileStruct)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HideAllFiles provides a mock function with given fields:
func (_m *IEditor) HideAllFiles() {
	_m.Called()
}

// OpenFileAndShow provides a mock function with given fields: filePath
func (_m *IEditor) OpenFileAndShow(filePath string) error {
	ret := _m.Called(filePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveFile provides a mock function with given fields: fileId
func (_m *IEditor) SaveFile(fileId int64) error {
	ret := _m.Called(fileId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShowFile provides a mock function with given fields: fileId
func (_m *IEditor) ShowFile(fileId int64) error {
	ret := _m.Called(fileId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFileContent provides a mock function with given fields: fileId, content
func (_m *IEditor) UpdateFileContent(fileId int64, content string) error {
	ret := _m.Called(fileId, content)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(fileId, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFileInformation provides a mock function with given fields: fileId, updateStruct
func (_m *IEditor) UpdateFileInformation(fileId int64, updateStruct types.FileTypeUpdateStruct) error {
	ret := _m.Called(fileId, updateStruct)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, types.FileTypeUpdateStruct) error); ok {
		r0 = rf(fileId, updateStruct)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIEditor interface {
	mock.TestingT
	Cleanup(func())
}

// NewIEditor creates a new instance of IEditor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIEditor(t mockConstructorTestingTNewIEditor) *IEditor {
	mock := &IEditor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
