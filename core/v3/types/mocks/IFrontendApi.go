// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	types "simple_text_editor/core/v3/types"

	mock "github.com/stretchr/testify/mock"
)

// IFrontendApi is an autogenerated mock type for the IFrontendApi type
type IFrontendApi struct {
	mock.Mock
}

// CloseFile provides a mock function with given fields: fileId
func (_m *IFrontendApi) CloseFile(fileId int64) {
	_m.Called(fileId)
}

// GetFileTypeExtension provides a mock function with given fields: fileTypeKey
func (_m *IFrontendApi) GetFileTypeExtension(fileTypeKey string) types.FrontendKeyValueArrayContainerStruct {
	ret := _m.Called(fileTypeKey)

	var r0 types.FrontendKeyValueArrayContainerStruct
	if rf, ok := ret.Get(0).(func(string) types.FrontendKeyValueArrayContainerStruct); ok {
		r0 = rf(fileTypeKey)
	} else {
		r0 = ret.Get(0).(types.FrontendKeyValueArrayContainerStruct)
	}

	return r0
}

// GetFileTypes provides a mock function with given fields:
func (_m *IFrontendApi) GetFileTypes() types.FrontendKeyValueArrayContainerStruct {
	ret := _m.Called()

	var r0 types.FrontendKeyValueArrayContainerStruct
	if rf, ok := ret.Get(0).(func() types.FrontendKeyValueArrayContainerStruct); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.FrontendKeyValueArrayContainerStruct)
	}

	return r0
}

// GetFilesShortInfo provides a mock function with given fields:
func (_m *IFrontendApi) GetFilesShortInfo() types.FrontendFileInfoArrayContainerStruct {
	ret := _m.Called()

	var r0 types.FrontendFileInfoArrayContainerStruct
	if rf, ok := ret.Get(0).(func() types.FrontendFileInfoArrayContainerStruct); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.FrontendFileInfoArrayContainerStruct)
	}

	return r0
}

// GetOpenedFile provides a mock function with given fields:
func (_m *IFrontendApi) GetOpenedFile() types.FrontendFileContainerStruct {
	ret := _m.Called()

	var r0 types.FrontendFileContainerStruct
	if rf, ok := ret.Get(0).(func() types.FrontendFileContainerStruct); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.FrontendFileContainerStruct)
	}

	return r0
}

// SwitchOpenedFileTo provides a mock function with given fields: fileId
func (_m *IFrontendApi) SwitchOpenedFileTo(fileId int64) {
	_m.Called(fileId)
}

// UpdateFileContent provides a mock function with given fields: fileId, content
func (_m *IFrontendApi) UpdateFileContent(fileId int64, content string) {
	_m.Called(fileId, content)
}

// UpdateFileInformation provides a mock function with given fields: fileId, updateStruct
func (_m *IFrontendApi) UpdateFileInformation(fileId int64, updateStruct types.FileTypeUpdateStruct) {
	_m.Called(fileId, updateStruct)
}

type mockConstructorTestingTNewIFrontendApi interface {
	mock.TestingT
	Cleanup(func())
}

// NewIFrontendApi creates a new instance of IFrontendApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIFrontendApi(t mockConstructorTestingTNewIFrontendApi) *IFrontendApi {
	mock := &IFrontendApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
